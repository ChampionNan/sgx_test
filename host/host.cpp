// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

#include <openenclave/host.h>
#include <stdio.h>
#include <random>
#include "../include/common.h"

// Include the untrusted sgx_test header that is generated
// during the build. This file is generated by calling the
// sdk tool oeedger8r against the sgx_test.edl file.
#include "sgx_test_u.h"

#define N 1000000

EncOneBlock array[N];

void ocall_print_string(const char *str) {
  /* Proxy/Bridge will check the length and null-terminate the input string to prevent buffer overflow. */
  printf("%s", str);
  fflush(stdout);
}

bool check_simulate_opt(int* argc, const char* argv[])
{
    for (int i = 0; i < *argc; i++)
    {
        if (strcmp(argv[i], "--simulate") == 0)
        {
            fprintf(stdout, "Running in simulation mode\n");
            memmove(&argv[i], &argv[i + 1], (*argc - i) * sizeof(char*));
            (*argc)--;
            return true;
        }
    }
    return false;
}

int main(int argc, const char* argv[])
{
    oe_result_t result;
    int ret = 1;
    oe_enclave_t* enclave = NULL;
    std::random_device dev;
    std::mt19937 rng(dev());
    std::uniform_int_distribution<std::mt19937::result_type> dist6(0,N-1);
    int array2[10000];
    int sum1 = 0, sum2 = 0;

    uint32_t flags = OE_ENCLAVE_FLAG_DEBUG;
    if (check_simulate_opt(&argc, argv))
    {
        flags |= OE_ENCLAVE_FLAG_SIMULATE;
    }

    if (argc != 2)
    {
        fprintf(
            stderr, "Usage: %s enclave_image_path [ --simulate  ]\n", argv[0]);
        goto exit;
    }

    // Create the enclave
    result = oe_create_sgx_test_enclave(
        argv[1], OE_ENCLAVE_TYPE_AUTO, flags, NULL, 0, &enclave);
    if (result != OE_OK)
    {
        fprintf(
            stderr,
            "oe_create_sgx_test_enclave(): result=%u (%s)\n",
            result,
            oe_result_str(result));
        goto exit;
    }
    /* TEST */
    for (int i = 0; i < N; i++)
    {
        array[i].sortKey = N - i;
        array[i].primaryKey = i;
    }

    for (int i = 0; i < 10000; i++)
    {
        array2[i] = dist6(rng);
        sum1 += array[array2[i]].sortKey;
        sum2 += array[array2[i]].primaryKey;
    }
    printf("Host sum1: %d, sum2: %d\n", sum1, sum2);
    printf("Host Address: %ld\n", array);
    // Call into the enclave
    result = enclave_sgx_test(enclave, (int*)array, N, array2, 10000);
    if (result != OE_OK)
    {
        fprintf(
            stderr,
            "calling into enclave_sgx_test failed: result=%u (%s)\n",
            result,
            oe_result_str(result));
        goto exit;
    }

    ret = 0;

exit:
    // Clean up the enclave if we created one
    if (enclave)
        oe_terminate_enclave(enclave);

    return ret;
}